{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8NAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OACC,yBAAKC,UAAU,iDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcOK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCCRW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,kCACVY,KAAK,SACLC,YAAY,cACZC,SAAUH,MCTDP,EAAS,CACrB,CACCL,GAAI,EACJF,KAAM,aACNkB,SAAU,QACVjB,MAAO,mBAER,CACCC,GAAI,EACJF,KAAM,kBACNkB,SAAU,UACVjB,MAAO,oBAER,CACCC,GAAI,EACJF,KAAM,kBACNkB,SAAU,UACVjB,MAAO,mBAER,CACCC,GAAI,EACJF,KAAM,kBACNkB,SAAU,QACVjB,MAAO,gBAER,CACIC,GAAI,EACJF,KAAM,aACNkB,SAAU,QACVjB,MAAO,qBAEX,CACIC,GAAI,EACJF,KAAM,aACNkB,SAAU,SACVjB,MAAO,mBAEX,CACIC,GAAI,EACJF,KAAM,cACNkB,SAAU,SACVjB,MAAO,mBAEX,CACIC,GAAI,EACJF,KAAM,iBACNkB,SAAU,WACVjB,MAAO,wBAEX,CACIC,GAAI,EACJF,KAAM,cACNkB,SAAU,OACVjB,MAAO,wBAEX,CACIC,GAAI,GACJF,KAAM,aACNkB,SAAU,QACVjB,MAAO,eCzBGkB,G,wDA3Bd,aAAc,IAAD,8BACZ,gBAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAET,YAAaQ,EAAME,OAAOC,SAP1C,EAAKC,MAAO,CACXlB,OAAQA,EACRM,YAAa,IAJF,E,qDAYH,IAAD,OACFa,EAAiBC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC/C,OAAOA,EAAOP,KAAK6B,cAAcC,SAAS,EAAKL,MAAMZ,YAAYgB,kBAGlE,OADAE,QAAQC,IAAIN,GAEZ,yBAAKvB,UAAU,MACd,wBAAIA,UAAU,MAAd,YACA,kBAAC,EAAD,CAAWW,aAAca,KAAKP,iBAC9B,kBAAC,EAAD,CAAUb,OAAQmB,S,GAtBHO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.2b01f970.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t// const {name, email, id} = props;\r\n\treturn (\r\n\t\t<div className='tc bg-white dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ( {robots} ) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t);\t\t\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lighest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search pals' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'Paul Allen',\r\n\t\tusername: 'Allen',\r\n\t\temail: 'allen@vice.pres'\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: 'Patrick Bateman',\r\n\t\tusername: 'Bateman',\r\n\t\temail: 'batman@vice.pres'\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: 'William Wallace',\r\n\t\tusername: 'Wallace',\r\n\t\temail: 'wallace@scot.uk'\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: 'Catherine Lorna',\r\n\t\tusername: 'Lorna',\r\n\t\temail: 'lorna@may.fi'\r\n\t},\r\n\t{\r\n\t    id: 5,\r\n\t    name: 'Beth Janet',\r\n\t    username: 'Janet',\r\n\t    email: 'janet@clorance.ca'\r\n\t},\r\n\t{\r\n\t    id: 6,\r\n\t    name: 'Jack Frost',\r\n\t    username: 'keaton',\r\n\t    email: 'jack@frost.info'\r\n\t},\r\n\t{\r\n\t    id: 7,\r\n\t    name: 'Alex Pruitt',\r\n\t    username: 'pruitt',\r\n\t    email: 'alex@home.again'\r\n\t},\r\n\t{\r\n\t    id: 8,\r\n\t    name: 'Clark Griswold',\r\n\t    username: 'Griswold',\r\n\t    email: 'griswold@lampoon.vac'\r\n\t},\r\n\t{\r\n\t    id: 9,\r\n\t    name: 'Neal Oliver',\r\n\t    username: 'neal',\r\n\t    email: 'oliver@interstate.io'\r\n\t},\r\n\t{\r\n\t    id: 10,\r\n\t    name: 'Leon Blake',\r\n\t    username: 'larry',\r\n\t    email: 'curb@it.io'\r\n\t}\r\n];","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { robots } from './robots';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state= {\r\n\t\t\trobots: robots,\r\n\t\t\tsearchfield: ''\t\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robots => {\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tconsole.log(filteredRobots);\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>RoboPals</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t<CardList robots={filteredRobots} />\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}